{"version":3,"sources":["assets/lightsaber.png","assets/lightsaber_2.png","assets/glow.png","config/route-config.ts","services/swapi-api/api.ts","context/global/films/films_actions.ts","services/baseRequestService.ts","services/swapi-api/index.ts","config/style-config.ts","context/global/films/films_reducer.ts","context/global/global-reducer.ts","context/global/GlobalContext.ts","components/common/AccordionList.tsx","components/films/FilmCard.tsx","components/films/CustomList.tsx","components/films/Films.tsx","components/app/Routes.tsx","context/global/GlobalContextProvider.tsx","components/app/App.tsx","index.tsx"],"names":["module","exports","RoutePath","basePath","FilmsActionType","parseParams","params","keys","Object","options","forEach","key","isParamTypeObject","isParamTypeArray","length","element","slice","baseRequestService","endpoint","a","method","Promise","reject","axios","then","response","data","console","log","BASE_PATH","replace","SWApiFetchParamCreator","Error","configuration","getFilms","localVarRequestOptions","assign","url","getPeople","people","SWApiFp","localVarFetchArgs","catch","err","ApiFactory","Colors","Fonts","FontWeight","Breakpoints","addFilmsAction","films","type","ADD_FILMS","payload","filmsReducer","state","action","initialState","film","globalReducer","GlobalContext","createContext","dispatch","useStyles","makeStyles","theme","root","width","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","color","palette","text","secondary","AccordionList","classes","React","useState","setExpanded","className","map","item","Accordion","onChange","panel","event","isExpanded","style","padding","AccordionSummary","expandIcon","aria-controls","id","Typography","name","AccordionDetails","Container","variant","component","birth_year","eye_color","skin_color","mass","height","maxWidth","marginTop","border","borderRadius","media","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","FilmCard","setErrors","expanded","setPeople","loading","setLoading","handleExpandClick","characters","split","promises","character","all","message","Card","CardHeader","avatar","Avatar","aria-label","src","lightSaber","IconButton","title","subheader","release_date","glow","director","producer","CardContent","opening_crawl","CardActions","disableSpacing","clsx","onClick","aria-expanded","Collapse","in","timeout","unmountOnExit","LinearProgress","paragraph","container","linearProgress","CustomList","selectedFilms","Grid","justify","fixed","wrap","alignItems","direction","flexGrow","paper","spacing","textAlign","image","position","top","left","zIndex","img","flex","Films","errors","setSelectedFilms","useContext","getFilmsAsync","results","useEffect","sm","xs","alignContent","logo","alt","Autocomplete","multiple","newValue","handleAutoComplete","getOptionLabel","option","renderTags","tagValue","getTagProps","index","Chip","label","minWidth","renderInput","TextField","placeholder","size","filter","severity","Routes","data-testid","exact","path","Index","to","GlobalContextProvider","props","useReducer","Provider","value","children","appTheme","fontFamily","FONT_FAMILY","fontWeightMedium","MEDIUM","body2","primary","main","PRIMARY_MAIN_COLOR","dark","PRIMARY_DARK_COLOR","SUCCESS_COLOR","error","ERROR_MAIN_COLOR","breakpoints","values","XS","SM","md","MD","lg","LG","xl","XL","createMuiTheme","App","window","renderShoreline","containerId","elem","document","getElementById","ReactDOM","render","unmountShoreline","unmountComponentAtNode","isRenderedByContainer"],"mappings":"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","file":"static/js/main.ba12fba8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/lightsaber.1742b375.png\";","module.exports = __webpack_public_path__ + \"static/media/lightsaber_2.87633dd4.png\";","module.exports = __webpack_public_path__ + \"static/media/glow.6cd54b7f.png\";","export enum RoutePath {\n  Index = '/',\n  Films = '/films'\n}","import { baseRequestService } from '../baseRequestService';\n\nexport type Configuration = {\n  readonly basePath: string\n}\n\nconst BASE_PATH = \"https://swapi.dev/api/\".replace(/\\/+$/, \"\");\n\nexport interface FetchArgs {\n  readonly url?: string\n  readonly options: any;\n}\n\nexport class RequiredError extends Error {\n  name: \"RequiredError\"\n  constructor(public field: string, msg?: string) {\n    super(msg);\n  }\n}\n\nexport const SWApiFetchParamCreator = function (configuration: Configuration) {\n  return {\n    getFilms(options: any = {}): FetchArgs {\n      \n      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n\n      return {\n        url: '/films',\n        options: localVarRequestOptions\n      }\n    },\n    getPeople(people: string, options: any = {}): FetchArgs {\n      \n      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n\n      return {\n        url: `/people/${people}`,\n        options: localVarRequestOptions\n      }\n    }\n  }\n}\n\nconst SWApiFp = function (configuration?: Configuration) {\n  return {\n    getFilms(options?: any): (basePath?: string) => Promise<any> {\n      const localVarFetchArgs = SWApiFetchParamCreator(configuration!).getFilms(options);\n\n      return (basePath: string = BASE_PATH) => {\n        return baseRequestService(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n          .catch(err => {\n            throw err\n          })\n      };\n    },\n    getPeople(people: string, options?: any): (basePath?: string) => Promise<any> {\n      const localVarFetchArgs = SWApiFetchParamCreator(configuration!).getPeople(people, options);\n\n      return (basePath: string = BASE_PATH) => {\n        return baseRequestService(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n          .catch(err => {\n            throw err\n          })\n      };\n    },\n    // searchSymbols(keywords: string, datatype?: string, options?: any): (basePath?: string) => Promise<any> {\n    //   const localVarFetchArgs = SWApiFetchParamCreator(configuration!).searchSymbols(keywords, datatype, options);\n\n    //   return (basePath: string = BASE_PATH) => {\n    //     return baseRequestService(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n    //       .catch(err => {\n    //         throw err\n    //       })\n    //   };\n    // },\n  }\n}\n\nexport const SWApiFactory = (configuration?: Configuration, basePath?: string) => {\n  return {\n    getFilms(options?: any) {\n      return SWApiFp(configuration).getFilms(options)(basePath)\n    },\n    getPeople(people: string, options?: any) {\n      return SWApiFp(configuration).getPeople(people, options)(basePath)\n    }\n  }\n}","\nimport { Film } from 'domain/Film';\nimport { Action } from '../../Action';\n\nexport enum FilmsActionType {\n  ADD_FILMS = 'ADD_FILMS'\n}\n\nexport interface AddFilmsAction extends Action {\n  type: FilmsActionType.ADD_FILMS,\n  payload: {\n    films: Film[]\n  }\n}\n\nconst addFilmsAction = (\n  films: Film[]\n): AddFilmsAction => ({\n  type: FilmsActionType.ADD_FILMS,\n  payload: {\n    films\n  }\n})\n\nexport type FilmsAction = AddFilmsAction\n\nexport {\n  addFilmsAction\n};","import axios, { AxiosRequestConfig } from 'axios';\n\nconst parseParams = (params: any) => {\n  const keys = Object.keys(params);\n  let options = '';\n\n  keys.forEach((key) => {\n    const isParamTypeObject = typeof params[key] === 'object';\n    const isParamTypeArray = isParamTypeObject && (params[key].length >= 0);\n\n    if (!isParamTypeObject) {\n      options += `${key}=${params[key]}&`;\n    }\n\n    if (isParamTypeObject && isParamTypeArray) {      \n      params[key].forEach((element: any) => {\n        options += `${key}=${element}&`;\n      });\n    }\n  });\n\n  return options ? options.slice(0, -1) : options;\n};\n\nconst baseRequestService = async (\n  endpoint: string,\n  options: AxiosRequestConfig\n): Promise<any> => {\n    try {\n      if (!endpoint || !options?.method) {\n        return Promise.reject(\"Please enter endpoint\")\n      };\n\n      if (options.method === 'GET') {\n\n        options['paramsSerializer'] = params => {\n          return  parseParams(params)\n        }\n      }\n\n      return axios(endpoint, options).then(response=> {\n        return response.data\n      })\n    } catch (err) {\n      \n      console.log('err', err)\n      return Promise.reject(err);\n    }\n \n};\n\nexport {\n  baseRequestService\n};\n","import { SWApiFactory } from './api';\n\nconst config = {\n  basePath: 'https://swapi.dev/api/'\n}\n\nconst ApiFactory = SWApiFactory(config)\n\nexport default ApiFactory;","export enum Colors {\n  PRIMARY_MAIN_COLOR = '#0f99d6',\n  PRIMARY_DARK_COLOR = '#034694',\n  SUCCESS_COLOR = '#8dc63f',\n  ERROR_MAIN_COLOR = '#ff0000',\n  SWITCH_LIGHT_BLUE = '#cfebf7',\n  SWITCH_LIGHT_GREY = '#b0b0b0',\n  SWITCH_DISABLED_GREY = '#efefef',\n  SWITCH_DARK_GREY = '#505050',\n  BLACK_MEDIUM = 'rgba(0, 0, 0, 0.8)',\n  WHITE = '#fff',\n  BLACK = '#000',\n  CARD_BORDER = '#f0f0f0'\n}\n\nexport enum Fonts {\n  FONT_FAMILY = '\"Open Sans\", \"Helvetica\", \"Arial\", sans-serif'\n}\nexport enum FontWeight {\n  MEDIUM = 600\n}\n\nexport enum Breakpoints {\n  XS = 0,\n  SM = 576,\n  MD = 768,\n  LG = 992,\n  XL = 1200\n}\n\nexport const appTheme = {\n  typography: {\n    fontFamily: Fonts.FONT_FAMILY,\n    fontWeightMedium: FontWeight.MEDIUM,\n    body2: {\n      fontSize: '0.75rem'\n    }\n  },\n  palette: {\n    primary: {\n      main: Colors.PRIMARY_MAIN_COLOR,\n      dark: Colors.PRIMARY_DARK_COLOR\n    },\n    secondary: {\n      main: Colors.SUCCESS_COLOR\n    },\n    error: {\n      main: Colors.ERROR_MAIN_COLOR\n    }\n  },\n  breakpoints: {\n    values: {\n      xs: Breakpoints.XS,\n      sm: Breakpoints.SM,\n      md: Breakpoints.MD,\n      lg: Breakpoints.LG,\n      xl: Breakpoints.XL\n    }\n  }\n};\n","import { Film } from 'domain/Film';\nimport { FilmsAction, FilmsActionType } from './films_actions';\n\nexport interface FilmState {\n  films: Film[]\n};\n\nexport const filmsInitialState: FilmState = {\n  films: []\n};\n\nexport const filmsReducer = (\n  state: FilmState,\n  action: FilmsAction\n): FilmState => {\n  switch (action.type) {\n    case FilmsActionType.ADD_FILMS:\n      return {\n        films: action.payload.films\n      };\n    default:\n      return state;\n  }\n}","import { AnyAction } from '../AnyAction';\nimport { filmsInitialState, filmsReducer, FilmState} from './films/films_reducer';\n\nexport interface GlobalState {\n  film: FilmState\n}\n\nexport const initialState: GlobalState = {\n  film: filmsInitialState\n};\n\nexport const globalReducer = (\n  state: GlobalState,\n  action: AnyAction\n) : GlobalState => {\n  const { film } = state;\n\n  return {\n    film: filmsReducer(film, action)\n  }\n};\n","import { createContext, Dispatch, useContext } from 'react';\n\nimport { GlobalState, initialState} from './global-reducer';\nimport { Action } from '../Action';\n\nexport interface GlobalContextValue extends GlobalState {\n  dispatch: Dispatch<Action>\n};\n\nexport const GlobalContext = createContext<GlobalContextValue>({\n  ...initialState,\n  dispatch: () => {}\n});\n\nexport const useGlobalContext = (): GlobalContextValue =>\n  useContext(GlobalContext);\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { Container } from '@material-ui/core';\nimport { Character } from 'domain/Film';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n}));\n\nexport const AccordionList = ({data}: {\n  data: Character[]\n}) => {\n  const classes = useStyles();\n  const [expanded, setExpanded] = React.useState(false);\n\n  const handleChange = (panel: any) => (event: any, isExpanded: boolean) => {\n    setExpanded(isExpanded ? panel : false);\n  };\n\n  return (\n    <div className={classes.root}>\n     {data.map((item: Character) =>  <Accordion  onChange={handleChange(item.url)}\n     style={{padding: 10}}\n     >\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel1bh-content\"\n          id=\"panel1bh-header\"\n        >\n          <Typography className={classes.heading} color=\"primary\">{item.name}</Typography>\n          {/* <Typography className={classes.secondaryHeading}>{item.gender}</Typography> */}\n        </AccordionSummary>\n        <AccordionDetails>\n       <Container >\n       <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n         Birth Year: {item.birth_year}\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n         Eye Color: {item.eye_color}\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n         Skin Color: {item.skin_color}\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n         Mass: {item.mass}\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n         Height: {item.height}\n        </Typography>\n       </Container>\n        </AccordionDetails>\n      </Accordion>)}\n    </div>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Collapse from '@material-ui/core/Collapse';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport { red } from '@material-ui/core/colors';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ShareIcon from '@material-ui/icons/Share';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport MovieFilter from '@material-ui/icons/MovieFilter';\nimport FaceIcon from '@material-ui/icons/Face';\nimport { Character, Film } from './../../domain/Film'\nimport lightSaber from 'assets/lightsaber_2.png'\nimport glow from 'assets/glow.png'\nimport ApiFactory from 'services/swapi-api';\nimport { LinearProgress } from '@material-ui/core';\nimport { AccordionList } from 'components/common/AccordionList'\nimport { BasicError } from 'domain/Global';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 345,\n    padding: 20,\n    marginTop: 25,\n    border: '1px solid #70B8FF',\n    borderRadius: 20\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(10deg)',\n  }\n}));\n\ninterface FilmCardProps {\n  readonly film: Film,\n  readonly setErrors: (err: BasicError[]) => void\n}\n\nexport const FilmCard = ({film, setErrors}: FilmCardProps) => {\n  const classes = useStyles();\n  const [expanded, setExpanded] = React.useState(false);\n\n  const [people, setPeople] = React.useState<Character[]>();\n  const [loading, setLoading] = React.useState<boolean>(false);\n\n  const handleExpandClick = async () => {\n    setExpanded(!expanded);\n    try {\n      if (!people) {\n        setLoading(true)\n        let characters = film.characters.map((item: any) => item.split('/')[5]);\n        let promises = characters.map((character: any) => ApiFactory.getPeople(character))\n        characters = await Promise.all(promises)\n        setLoading(false)\n        setPeople(characters!)\n        console.log(characters)\n        // characters = characters\n        // let people = await ApiFactory.getPeople()\n      }\n    } catch (err) {\n      setLoading(false)\n      setErrors([{\n        message: \"Something went wrong, please try again\"\n      }])\n    }\n  };\n\n\n\n\n  if (!film) return <></>\n\n  return (\n    <Card className={classes.root}>\n      <CardHeader\n        avatar={\n          <Avatar aria-label=\"recipe\" src={lightSaber} />\n        }\n        action={\n          <IconButton aria-label=\"settings\">\n            <MovieFilter />\n          </IconButton>\n        }\n        title={`Movie title: ${film.title}`}\n        subheader={`Release Date: ${film.release_date}`}\n      />\n      <CardHeader\n        avatar={\n          <Avatar aria-label=\"recipe\" src={glow} />\n        }\n        action={\n          <IconButton aria-label=\"settings\">\n            <FaceIcon />\n          </IconButton>\n        }\n        title={`Director: ${film.director}`}\n        subheader={`Producer: ${film.producer}`}\n      />\n      \n      <CardContent>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n         {film.opening_crawl}\n        </Typography>\n      </CardContent>\n      <CardActions disableSpacing>\n        <IconButton\n          className={clsx(classes.expand, {\n            [classes.expandOpen]: expanded,\n          })}\n          onClick={handleExpandClick}\n          aria-expanded={expanded}\n          aria-label=\"show more\"\n        >\n          <Typography>\n            Details about characters\n          </Typography>\n          <ExpandMoreIcon />\n        </IconButton>\n      </CardActions>\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <CardContent>\n          {loading ? <LinearProgress color=\"primary\" /> : <div>\n          <Typography paragraph>Method:</Typography>\n          <AccordionList data={people || []} />\n          {/* <Typography paragraph>\n            Heat 1/2 cup of the broth in a pot until simmering, add saffron and set aside for 10\n            minutes.\n          </Typography>\n          <Typography paragraph>\n            Heat oil in a (14- to 16-inch) paella pan or a large, deep skillet over medium-high\n            heat. Add chicken, shrimp and chorizo, and cook, stirring occasionally until lightly\n            browned, 6 to 8 minutes. Transfer shrimp to a large plate and set aside, leaving chicken\n            and chorizo in the pan. Add pimentón, bay leaves, garlic, tomatoes, onion, salt and\n            pepper, and cook, stirring often until thickened and fragrant, about 10 minutes. Add\n            saffron broth and remaining 4 1/2 cups chicken broth; bring to a boil.\n          </Typography>\n          <Typography paragraph>\n            Add rice and stir very gently to distribute. Top with artichokes and peppers, and cook\n            without stirring, until most of the liquid is absorbed, 15 to 18 minutes. Reduce heat to\n            medium-low, add reserved shrimp and mussels, tucking them down into the rice, and cook\n            again without stirring, until mussels have opened and rice is just tender, 5 to 7\n            minutes more. (Discard any mussels that don’t open.)\n          </Typography>\n          <Typography>\n            Set aside off of the heat to let rest for 10 minutes, and then serve.\n          </Typography> */}\n          </div>}\n          \n        </CardContent>\n      </Collapse>\n    </Card>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport { Container, Grid, LinearProgress, makeStyles, Typography } from '@material-ui/core';\nimport { Film } from 'domain/Film';\nimport { FilmCard } from './FilmCard'\nimport { BasicError } from 'domain/Global';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    marginTop: 10\n  },\n  linearProgress: {\n    width: '70%'\n  }\n}));\n\ninterface CustomListProps {\n  readonly loading: boolean\n  readonly selectedFilms: Film[]\n  readonly setErrors: (err: BasicError[]) => void\n}\n\nexport const CustomList = ({\n  loading,\n  selectedFilms,\n  setErrors\n}: CustomListProps) => {\n  const classes = useStyles();\n\n  if (loading) return (\n    <Grid container justify=\"center\" className={classes.container}>\n      <LinearProgress className={classes.linearProgress} />\n      <LinearProgress color=\"primary\" className={classes.linearProgress} />\n    </Grid>\n  )\n\n  return (\n    <Container fixed>\n\n      <Grid\n        item\n        container\n        wrap=\"wrap\"\n        justify=\"space-around\"\n        alignItems=\"center\"\n        direction=\"row\"\n        // xs={12}\n        style={{\n          padding: 20\n        }}\n      >\n        {selectedFilms.map((film: Film) => <FilmCard\n          setErrors={setErrors}\n          film={film}\n        />)}\n        {/* <Typography style={{ padding: 10 }} variant=\"h4\" component=\"h4\" color=\"primary\">\n          Selected Range\n        </Typography>\n        <Grid container\n          justify=\"center\"\n          alignItems=\"center\"\n\n          item xs={12}\n          direction=\"row\">\n\n          {selectedRange.map((date: string, index: number) =>\n            <Typography key={index} style={{ padding: 10 }} variant=\"h6\" component=\"h6\" >\n              {moment(date).format('YYYY-MMMM-DD')}\n            </Typography>\n          )}\n        </Grid>\n\n        {averages.map((item: AverageObject, index: number) =>\n          <Typography key={index} style={{ padding: 10 }} variant=\"h6\" component=\"h6\" color=\"secondary\" >\n            Average for {item.name} : {item.average.toFixed(3)}\n          </Typography>\n        )} */}\n      </Grid>\n\n\n\n    </Container>\n  )\n\n}\n","import React, { useState, useEffect } from 'react';\n\nimport { Chip, Container, Grid, IconButton, makeStyles, TextField } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ApiFactory from '../../services/swapi-api';\nimport { BasicError } from 'domain/Global'\nimport { useGlobalContext } from 'context/global/GlobalContext';\nimport { addFilmsAction } from 'context/global/films/films_actions';\nimport logo from '../../assets/lightsaber.png'\nimport { CustomList } from './CustomList';\nimport { Film } from 'domain/Film';\nimport Alert from '@material-ui/lab/Alert/Alert';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  container: {\n    marginTop: 10\n  },\n  image: {\n    position: 'absolute',\n    top: 0,\n    left: 20,\n    zIndex: -2,\n    width: 300\n  },\n  img: {\n    flex: 1,\n    padding: 5,\n    maxWidth: '25%'\n  },\n  linearProgress: {\n    width: '70%'\n  }\n}));\n\nexport const Films = () => {\n  const classes = useStyles();\n\n  // const [films, setFilms] = useState<Film[]>([]);\n  const [errors, setErrors] = useState<BasicError[]>()\n  const [loading, setLoading] = useState<boolean>(false)\n  const [selectedFilms, setSelectedFilms] = useState<Film[]>()\n\n  const {\n    film: {\n      films\n    },\n    dispatch\n  } = useGlobalContext();\n\n  const getFilmsAsync = async () => {\n    try {\n      setLoading(true)\n      let films = await ApiFactory.getFilms();\n      dispatch(addFilmsAction(films.results))\n      setLoading(false)\n    } catch (err) {\n      setErrors([{\n        message: 'Something went wrong, please try again'\n      }])\n    }\n  }\n\n  useEffect(() => {\n    getFilmsAsync();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n\n  // const handleTextInput = async (ev: any) => {\n  //   try {\n  //     ev.preventDefault();\n  //     if (!ev.target[0].value) return;\n\n  //     let query = ev.target[0].value\n  //     let {\n  //       bestMatches\n  //     }: {\n  //       bestMatches: BestMatches[]\n  //     } = await ApiFactory.searchSymbols(query);\n\n  //     setSearchedCompany(bestMatches);\n  //   } catch (err) {\n  //     setErrors([{\n  //       message: 'Something went wrong, please try again'\n  //     }])\n  //   }\n  // }\n\n  const handleAutoComplete = (newValue: Film[]) => {\n    setSelectedFilms(newValue)\n    // dispatch(addFilmsAction(newValue))\n  }\n\n  console.log('filllms', films)\n  return (\n    <div>\n      <Container >\n        <Grid\n          container\n          justify=\"space-around\"\n          item sm\n          xs={12}\n          alignContent=\"center\"\n          alignItems=\"center\"\n        >\n          <img src={logo} className={classes.img} alt=\"logo\" />\n          <Autocomplete\n            multiple\n            id=\"fixed-tags-demo\"\n            // value={films || []}\n            onChange={(event, newValue) => handleAutoComplete(newValue)}\n            options={films}\n            getOptionLabel={(option: Film) => option['title']!}\n            renderTags={(tagValue, getTagProps) =>\n              tagValue.map((option, index) => (\n                <Chip\n                  label={option['title']}\n                  {...getTagProps({ index })}\n                />\n              ))\n            }\n            style={{ minWidth: '50vw' }}\n            renderInput={(params) => (\n              <form \n              // onSubmit={handleTextInput}\n              \n              >\n                <TextField\n                  {...params}\n                  id=\"filled-basic\"\n                  label=\"Search for a Star Wars movie\"\n                  variant=\"outlined\"\n                  placeholder={`Search for a Star Wars movie`} />\n              </form>\n            )}\n          />\n        </Grid>\n\n        <Grid\n          container\n          justify=\"center\"\n          item sm\n          xs={12}\n          alignContent=\"center\"\n          alignItems=\"center\"\n        >\n          <div>\n            {errors && errors.map((item: BasicError) => (\n              <Alert\n                action={\n                  <IconButton\n                    aria-label=\"close\"\n                    color=\"inherit\"\n                    size=\"small\"\n                    onClick={() => {\n                      setErrors([...errors.filter((err: BasicError) => item.message !== err.message)]);\n                    }}\n                  >\n                    <CloseIcon fontSize=\"inherit\" />\n                  </IconButton>\n                }\n                severity=\"error\">{item.message} </Alert>\n            ))}\n          </div>\n        </Grid>\n\n        <CustomList\n          loading={loading}\n          selectedFilms={selectedFilms || []}\n          setErrors={(errors: BasicError[]) => setErrors(errors)}\n        />\n      </Container>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport { RoutePath } from '../../config/route-config';\nimport { Films } from 'components/films/Films'\n\nexport const routesTestId = 'RoutesComponent';\n\nexport const Routes = () => (\n  <div data-testid={routesTestId}>\n    <Switch>\n      <Route exact path={RoutePath.Index}>\n        <Films/>\n      </Route>\n\n      <Route path={RoutePath.Index}>\n        <Redirect to={RoutePath.Index}/>\n      </Route>\n    </Switch>\n  </div>\n);\n","import React, { useReducer, ReactNode } from 'react';\n\nimport { globalReducer, GlobalState, initialState } from './global-reducer';\nimport { GlobalContext } from './GlobalContext';\n\nexport const GlobalContextProvider = (props: { children: ReactNode }) => {\n  const [state, dispatch]: [GlobalState, any]= useReducer(globalReducer, initialState);\n\n  return (\n    <GlobalContext.Provider value={{ ...state, dispatch }}>\n      {props.children}\n    </GlobalContext.Provider>\n  )\n};","import React from 'react';\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\n\nimport { Routes } from './Routes';\nimport { GlobalContextProvider } from 'context/global/GlobalContextProvider';\nimport { appTheme } from 'config/style-config';\n\nconst theme = createMuiTheme(appTheme);\n\nconst App = (props: any) => {\n  return (\n    <div className=\"App\">\n        <MuiThemeProvider theme={theme}>\n          <BrowserRouter >\n            <GlobalContextProvider>\n              <Routes />\n            </GlobalContextProvider>\n          </BrowserRouter>\n        </MuiThemeProvider>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from 'components/app/App';\n\nwindow.renderShoreline = (containerId: string) => {\n  const elem = document.getElementById(containerId);\n\n  if (elem) {\n    ReactDOM.render(<App/>, elem);\n  }\n};\n\nwindow.unmountShoreline = (containerId: string) => {\n  const elem = document.getElementById(containerId);\n  if (elem) {\n    ReactDOM.unmountComponentAtNode(elem);\n  }\n};\n\nif (!window.isRenderedByContainer) {\n\n  window.renderShoreline('root');\n\n}\n"],"sourceRoot":""}